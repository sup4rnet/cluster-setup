#!/bin/bash

# Script to fetch active reservations from the server
# and updates the SSH authorized users file for the target switch, only
# if there are active reservations.

# The script will receive a JSON response only with the list of active reservations. 

# If the list is empty,  we do nothing, as the policy is not remove users unless there is someone that needs access (i.e., best effort service)
# If the list is not empty, we will update the SSH authorized users file, and enforce the ssh access priviledges.

# Configuration
SERVER_URL="{{ dashboard_url }}"  # Change to your server address
TARGET_SWITCH=$(hostname)
LOG_FILE="/var/log/reservation_monitor.log"
LOG_FILE='{{ restart_install_dir }}/{{ ssh_access_log_file }}'
GROUP_DENY_SSH="deny-ssh"

# Log with timestamp
log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
  echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log "Starting reservation monitor for $TARGET_SWITCH"

# Fetch active reservations directly
http_code=$(curl -s -w "%{http_code}" -o /tmp/active "$SERVER_URL/api/active_reservations?target=$TARGET_SWITCH")

# Check if curl was successful
if [ $? -ne 0 ]; then
  log "ERROR: Failed to connect to server at $SERVER_URL"
  exit 1
fi

# check if HTTP response code is valid
if [ "$http_code" -ne 200 ]; then
  log "ERROR: Received HTTP response code $http_code from server"
  exit 1
fi

# Read the curl response from the temporary file
response=$(cat /tmp/active)

# Process JSON response
if [[ "$response" == "[]" || -z "$response" ]]; then
  log "No active reservations found for $TARGET_SWITCH"
  exit 0
fi

# Extract usernames for compatibility with existing code
usernames=$(echo "$response" | jq -r '.[].username')
if [ -z "$usernames" ]; then
    log "ERROR: Failed to parse usernames from response: $response"
    exit 1
fi

# Extract username and expiry date pairs
user_expiry_pairs=$(echo "$response" | jq -r '.[] | "\(.username),\(.to)"')

# these are all usernames valid for the target switch at current time
USERS_WITH_RESERVATION_NOW=$(echo "$response" | jq -r '.[]| .username')


# for each line in the output, extract the username and expiry
while IFS=',' read -r AUTHORIZED_USER expiry; do
  
  if [ -n "$AUTHORIZED_USER" ]; then
    
    log "$AUTHORIZED_USER, $expiry"

    # Remove user from the $GROUP_DENY_SSH group
    log "allowing user $AUTHORIZED_USER. Expires at: $expiry"
    
    if members $GROUP_DENY_SSH | grep -q "$AUTHORIZED_USER"; then
      log "Removing user $AUTHORIZED_USER from group $GROUP_DENY_SSH"
      sudo gpasswd --delete $AUTHORIZED_USER $GROUP_DENY_SSH
    fi
    
    # select users to deny ssh access to (all users of p4-restart group except the ones with reservation now and the admin)
    USERS_TO_DENY=$(members {{ p4_restart_group }} | sed 's/{{ admin_user }}//g')
    for usr in $USERS_WITH_RESERVATION_NOW ; do  
      USERS_TO_DENY=$(echo $USERS_TO_DENY | sed "s/$usr//g")
    done

    log "Users to deny ssh access: $USERS_TO_DENY"

    # deny ssh-access to them 
    sudo gpasswd $GROUP_DENY_SSH -M $(echo $USERS_TO_DENY | tr -s ' ' ',')

    # kill sessions
    for usr in $USERS_TO_DENY ; do
        continue
        sudo pkill -o -u $usr sshd
    done

  fi
done <<< "$user_expiry_pairs"


log "Reservation monitor completed"