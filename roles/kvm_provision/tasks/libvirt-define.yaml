- block:

    - name: Debug
      debug:
        msg: "Defining VM {{ item }}, existing: {{ existing_vms }}"

    - name: Shutdown VM
      community.libvirt.virt:
        name: "{{ item }}"
        state: shutdown
      when: reconfigure_running_vms and item in existing_vms.list_vms

    # TODO: this had a native way for doing it (read somewhere in the docs for vitio-net etc.)
    - name: Copy base image to libvirt directory
      copy:
        dest: "{{ libvirt_pool_dir }}/{{ base_image_name_no_extension }}-{{ item }}.qcow2"
        src: "{{ libvirt_pool_dir }}/{{ base_image_name_no_extension }}.qcow2"
        force: false
        remote_src: yes
        mode: 0660
      register: copy_results
      when: item not in existing_vms.list_vms # only if the VM is new we need to copy the base image

    - name: Configure the image
      command: |
        virt-customize -a {{ libvirt_pool_dir }}/{{ base_image_name_no_extension }}-{{ item }}.qcow2 \
        --hostname {{ item }} \
        --root-password password:{{ vm_root_pass }}
      when: reconfigure_running_vms

    - name: show templating results
      debug:
        msg: "{{ lookup('template', 'vm-p4-sde.xml.j2') }}"


    - name: Define vm
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-p4-sde.xml.j2') }}"

  when: reconfigure_running_vms or item not in existing_vms.list_vms

- name: Start VM
  community.libvirt.virt:
    name: "{{ item }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2
  
- name: Ensure VM autostart at boot
  community.libvirt.virt:
    name: "{{ item }}"
    autostart: yes