#!/bin/bash

# Script to dynamically enable/disable ssh access for users in the {{ p4_restart_group }} group
# based on out-of-band reservation website.

# Assumes /etc/ssh/sshd_config contains line: DenyGroups deny-ssh 

AUTHORIZED_USERS_DB={{ ssh_auth_config }}
echo "$(date) -- checking ssh access for users in p4-restart group"

# if db exisisting
if [ -r "$AUTHORIZED_USERS_DB" ] ; then 

    IS_RESERVED=$(wc -l $AUTHORIZED_USERS_DB | cut -f 1 -d ' ')

    if [[ $IS_RESERVED ]] ; then

        AUTHORIZED_USER=$(cat $AUTHORIZED_USERS_DB | cut -d, -f1)
        EXPIRATION_TS=$(cat $AUTHORIZED_USERS_DB | cut -d, -f2 | xargs -d '\n' -I '{}' date +%s --date='{}')
        NOW_TS=$(date +%s)
        
        echo "$(date) -- checking ssh access for user $AUTHORIZED_USER. Expires at: $(date --date=@$EXPIRATION_TS)"
        
        if [ "$NOW_TS" -lt "$EXPIRATION_TS" ] ; then

            # kill ongoing sessions for non authorized users (except {{ ansible_user }})
            USERS=$(members {{ p4_restart_group }} | sed 's/{{ ansible_user }}//g')

            # deny ssh-access to all 
            sudo gpasswd deny-ssh -M $(echo $USERS | tr -s ' ' ',')

            for usr in $USERS ; do
                if [ "$usr" != "$AUTHORIZED_USER" ] ; then
                    sudo pkill -o -u $usr sshd
                fi
            done

            # allow user with reservation
            echo "$(date) -- allowing user $AUTHORIZED_USER. Expires at: $(date --date=@$EXPIRATION_TS)"
            sudo gpasswd --delete $AUTHORIZED_USER deny-ssh
        fi
    fi
    
fi