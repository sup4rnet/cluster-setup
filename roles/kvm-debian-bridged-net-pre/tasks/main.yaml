- name: Ensure requirements in place
  package:
    name:
      - bridge-utils
    state: present

- name: Add bridge
  ansible.builtin.nmcli:
    conn_name: "{{ item['bridge_name'] }}"
    ifname: "{{ item['bridge_name'] }}"
    type: bridge
    ip4: "{{ item['bridge_host_ip'] }}"
    gw4: "{{ item['bridge_host_gw'] }}"
    stp: false
    state: present
  with_items: "{{ bridges }}"

- name: Run script to get bridge slave interface suffix (none if no SR-IOV defined)
  shell: "{{ lookup('template', 'get-slave-if.sh.j2') }}"
  register: bridge_host_iface_suffix
  with_items: "{{ bridges }}"
  tags: ["run"]

- name: Debug name
  debug:
    msg: "Detected last VF {{ (bridge_host_iface_suffix.results | first).stdout }}"
  tags: ["run"]

# - name: Define variables
#   set_fact:
#     bridge_host_iface_suffix: "{{ (bridge_host_iface_suffix.results | first).stdout }}"

- name: Add bridge ports
  ansible.builtin.nmcli:
    conn_name: bridge-slave-{{ item['bridge_host_iface'] }}
    ifname: "{{ item['bridge_host_iface'] }}{{ (bridge_host_iface_suffix.results | first).stdout }}"
    slave_type: bridge
    type: bridge-slave
    master: "{{ item['bridge_name'] }}"
    state: present
  with_items: "{{ bridges }}"
  tags: ["run"]


- name: Relaod configuration and set bridge ports up
  ansible.builtin.command:
    cmd: |
      nmcli con reload "bridge-slave-{{ item['bridge_host_iface'] }}"
      nmcli con up "bridge-slave-{{ item['bridge_host_iface'] }}"
  with_items: "{{ bridges }}"

- name: Define a new bridged network
  community.libvirt.virt_net:
    command: define
    name: "{{ item['libvirt_bridged_net_name'] }}"
    xml: '{{ lookup("template", "libvirt-network.xml.j2") }}'
  with_items: "{{ bridges }}"

- name: Ensure network started
  community.libvirt.virt_net:
    name: "{{ item['libvirt_bridged_net_name'] }}"
    state: active
  with_items: "{{ bridges }}"

- name: Autostart network
  community.libvirt.virt_net:
    name: "{{ item['libvirt_bridged_net_name'] }}"
    autostart: yes
  with_items: "{{ bridges }}"

